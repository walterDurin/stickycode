#summary Example with some wiring

== Test a cumulator server wrapping a data repository ==

The key thing to take away from this is that there is very little boiler plate (if any) to wire up the CumulatorService with a Repository. The tests are very clean an obvious in there intent and execution.

{{{
@RunWith(MockwireRunner.class)
public class DecentTest {

  @Bless
  CumulativeService service;

  @Mock
  Repository repository;

  @Test
  public void cumulateNothingIsNothing() {
    assertThat(service.getDataSummary()).isEqualTo(0);
    verify(repository).getDatas();
  }

  @Test
  public void cumulate1is1() {
    when(repository.getDatas())
      .thenReturn(Collections.singletonList(new Data(1)));
    assertThat(service.getDataSummary()).isEqualTo(1);
  }
  
  @Test
  public void cumulativeLots() {
    
  }
}
}}}

Here are the other class/interface definitions, note the @Inject on the Repository field of the CumulativeService

{{{

interface Service {

  int getDataSummary();

}

class CumulativeService
    implements Service {

  @Inject
  Repository repository;

  @Override
  public int getDataSummary() {
    int i = 0;
    for (Data data : repository.getDatas()) {
      i += data.value;
    }
    return i;
  }

}

interface Repository {

  List<Data> getDatas();
}

class Data {

  int value;

  Data(int v) {
    this.value = v;
  }
}
}}}