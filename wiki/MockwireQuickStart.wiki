#summary A short guide to get you started with Mockwire
#labels Phase-Deploy

= Introduction =

Mockwire is a tool that takes care of the boiler plate of wiring up your tests, that means that all you see in your tests is 
  # a simple manifest of what to test 
  # mocking of controlled variables
  # assertions stating the assumptions to validate environment

Mockwire uses the test class itself to define which beans are mocks and which real by the use of two annotations @Mock and @Bless. 

Implementations of Mockwire build a registry of these beans and mocks and wire them by type. Currently only a spring25 implementation is going but watch that space.

== Why use mockwire ==

Many projects rely heavily on Dependency Injection to manage application assembly, because its a powerful tool. However many setups suffer from too much boiler plate when defining tests to verify the assembly.

Ideally we would always test our code just as it gets wired in production, if we write boiler plate code in our tests and use dependency injection in production environments we aren't really testing our code as it is run, which is somewhat pointless.

Mockwire just leverages the standard DI containers to build that assembly just as if the code under test was wire up properly. I call the assemblies isolated because its a well defined subset of the final application.

== Including Mockwire in you project ==

Add the appropriate MockwireDependency to your project to get started

== To use Mockwire with Junit ==

I primarily use Junit because I use Infinitest and Junit support in eclipse is a tad better than Testng. If you don't use junit See UsingMockwireWithoutJunit

Mockwire provides a junit4 runner: [http://code.google.com/p/stickycode/source/browse/trunk/net.stickycode.mockwire/sticky-mockwire/src/main/java/net/stickycode/mockwire/junit4/MockwireRunner.java MockwireRunner] to easily run your test all wired up.

{{{
@RunWith(MockwireRunner.class)
public class UnitTest {
}}}

== Blessing and Mocking ==

@Bless and @Mock and mock are used to define the types that end up in the wire test environment.

Mockwire scans the test class and identitifies the code you wish to test, 

e.g. SomeConcreteClass in being tested so we need to bless a real instance of it. How the class is turned into a real instance is left up to the DI tool in use.
{{{
@Bless
SomeConcreteClass codeToTest;
}}}

And controlled dependencies of the code to test, 

e.g. SomeConcreteClass requires a SomeInterface, this requirement is defined by @Inject
{{{
@Mock
SomeInterface thatSomeConcreteClassNeeds;
}}}
How the class actually gets mocked is left up to the Mocking implementation, I would highly recommend Mockito, but will supply bindings to other mocking libraries on request.

= For assertions and mocking =

See UnitTestingComposition which defines the libraries used and what they do.

= Examples =

MockwireHelloWorld
MockwireDecentExample

= Check out the examples and try it for yourself =

You will need to install [http://maven.apache.org maven] for this example. AFAIK any version will work, i've tested with 2.1.0 and 3.0-RC3.

{{{
svn co http://stickycode.googlecode.com/svn/trunk/net.stickycode.examples/sticky-example-mockwire 

cd sticky-example-mockwire
mvn test
}}}

You should see
{{{
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running net.stickycode.example.mockwire.UnitTest
MockwireIsolator v1.11 see http://stickycode.net/mockwire
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitTest$Unit'
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitTest$Unit'
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.871 sec
Running net.stickycode.example.mockwire.UnitDependenciesTest
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitDependenciesTest$Unit'
2010-09-29 01:40:07 I main n.s.m.s.SpringIsolatedTestManifest: registering bean 'mocked' of type 'net.stickycode.example.mockwire.UnitDependenciesTest$Dependency'
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.352 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
}}}

== Containment ==

It can be very useful