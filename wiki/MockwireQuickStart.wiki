#summary A short guide to get you started with Mockwire
#labels Phase-Deploy

= Introduction =

Mockwire is a tool allow the simple definition of a unit test environment, the test class itself defines all the beans used to build a DependencyInjectionRegistry and wires them together.

Ideally we would always test our code just as it gets wired in production, if we write boiler plate code in our tests and use dependency injection in production environments we are really testing out code correctly.

One possible solution is to use di contexts for integration and functional testing, however it soon becomes unwieldy to maintain, 1000s of lines of xml for spring quickly becomes more complicated that the software you are building.

Using classpath scanning for components and jsr330 you can run you tests environments just like the production wiring would.

= To use Mockwire with Junit =

Just use the junit4 [http://code.google.com/p/stickycode/source/browse/trunk/net.stickycode.mockwire/sticky-mockwire/src/main/java/net/stickycode/mockwire/junit4/MockwireRunner.java MockwireRunner] to execute the test in a Mockwire context.

{{{
@RunWith(MockwireRunner.class)
public class UnitTest {
}}}

If you don't use junit See UsingMockwireWithoutJunit

= Blessing and Mocking =

@Bless and @Mock and mock are used to define the types that end up in the wire test environment.

Mockwire scans the test class and identitifies the code you wish to test, 

e.g. SomeConcreteClass in being tested so we need to bless a real instance of it
{{{
@Bless
SomeConcreteClass codeToTest;
}}}

And controlled dependencies of the code to test, 

e.g. SomeConcreteClass requires a SomeInterface, this requirement is defined by @Inject
{{{
@Mock
SomeInterface thatSomeConcreteClassNeeds;
}}}

= For assertions and mocking =

See UnitTestingComposition which defines the libraries used and what they do.

= Example unit test =

In this example a *Unit* of code defined in this case by an inner class is blessed into the test context. Several asserts are defined in a test method to verify
the unit of code.

{{{
@RunWith(MockwireRunner.class)
public class UnitTest {

  /**
   * A unit of code to be tested
   */
  static class Unit {
    public boolean echo(boolean echo) {
      return echo;
    }
  }

  @Bless
  Unit unit;

  @Test
  public void simple() {
    assertThat(unit).isNotNull();
    assertThat(unit.echo(true)).isTrue();
    assertThat(unit.echo(false)).isFalse();
  }
}}}

[http://code.google.com/p/stickycode/source/browse/trunk/net.stickycode.examples/sticky-example-mockwire/src/test/java/net/stickycode/example/mockwire/UnitTest.java Code sample]

= Example unit test with interdependencies =

{{{
@RunWith(MockwireRunner.class)
public class UnitDependenciesTest {

  public interface Dependency {
    void call();
  }

  static class Unit {
    @Inject
    Dependency dependency;
    public void call() {
      dependency.call();
    }
  }

  @Bless
  Unit unit;

  @Mock
  Dependency mocked;

  @Test
  public void simple() {
    assertThat(unit).isNotNull();
    assertThat(unit.dependency).isNotNull();
    
    unit.call();
    verify(mocked).call();
  }
}
}}}

[http://code.google.com/p/stickycode/source/browse/trunk/net.stickycode.examples/sticky-example-mockwire/src/test/java/net/stickycode/example/mockwire/UnitDependenciesTest.java Code sample]

= Check out the example and try it for yourself =

You will need to install [http://maven.apache.org maven] for this example. AFAIK any version will work, i've tested with 2.1.0 and 3.0-RC3.

{{{
svn co http://stickycode.googlecode.com/svn/trunk/net.stickycode.examples/sticky-example-mockwire 

cd sticky-example-mockwire
mvn test
}}}

You should see
{{{
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running net.stickycode.example.mockwire.UnitTest
MockwireIsolator v1.11 see http://stickycode.net/mockwire
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitTest$Unit'
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitTest$Unit'
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.871 sec
Running net.stickycode.example.mockwire.UnitDependenciesTest
2010-09-29 01:40:06 I main n.s.m.s.SpringIsolatedTestManifest: registering definition 'unit' for type 'net.stickycode.example.mockwire.UnitDependenciesTest$Unit'
2010-09-29 01:40:07 I main n.s.m.s.SpringIsolatedTestManifest: registering bean 'mocked' of type 'net.stickycode.example.mockwire.UnitDependenciesTest$Dependency'
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.352 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
}}}

== Containment ==

It can be very useful
